import numpy as np
from scipy.optimize import brentq

def propeller(V_S, R):
    # 错误信号初始值
    Esignal1 = 0

    # 螺旋桨参数
    D_p = 1.835   # 螺旋桨直径 (m)
    pd = 0.7      # 螺距比
    AeAo = 0.55   # 盘面比
    z = 4         # 叶片数
    
    # 环境参数
    D_sw = 1027   # 海水密度 (kg/m³)

    # 计算推力
    t = 0.305     # 推力减额分数
    T = R / (1 - t)

    # 计算进速
    w = 0.22      # 伴流分数
    V_a = (1 - w) * V_S

    # 定义At系数矩阵 (用于计算c0-c3)
    At = [
        [0.00880496, 0, 0, 0, 0],
        [-0.204554, 1, 0, 0, 0],
        [0.166351, 0, 1, 0, 0],
        [0.158114, 0, 2, 0, 0],
        [-0.147581, 2, 0, 1, 0],
        [-0.481497, 1, 1, 1, 0],
        [0.415437, 0, 2, 1, 0],
        [0.0144043, 0, 0, 0, 1],
        [-0.0530054, 2, 0, 0, 1],
        [0.0143481, 0, 1, 0, 1],
        [0.0606826, 1, 1, 0, 1],
        [-0.0125894, 0, 0, 1, 1],
        [0.0109689, 1, 0, 1, 1],
        [-0.133698, 0, 3, 0, 0],
        [0.00638407, 0, 6, 0, 0],
        [-0.00132718, 2, 6, 0, 0],
        [0.168496, 3, 0, 1, 0],
        [-0.0507214, 0, 0, 2, 0],
        [0.0854559, 2, 0, 2, 0],
        [-0.0504475, 3, 0, 2, 0],
        [0.010465, 1, 6, 2, 0],
        [-0.00648272, 2, 6, 2, 0],
        [-0.00841728, 0, 3, 0, 1],
        [0.0168424, 1, 3, 0, 1],
        [-0.00102296, 3, 3, 0, 1],
        [-0.0317791, 0, 3, 1, 1],
        [0.018604, 1, 0, 2, 1],
        [-0.00410798, 0, 2, 2, 1],
        [-0.000606848, 0, 0, 0, 2],
        [-0.0049819, 1, 0, 0, 2],
        [0.0025983, 2, 0, 0, 2],
        [-0.000560528, 3, 0, 0, 2],
        [-0.00163652, 1, 2, 0, 2],
        [-0.000328787, 1, 6, 0, 2],
        [0.000116502, 2, 6, 0, 2],
        [0.000690904, 0, 0, 1, 2],
        [0.00421749, 0, 3, 1, 2],
        [0.0000565229, 3, 6, 1, 2],
        [-0.00146564, 0, 3, 2, 2]
    ]

    # 计算c0-c3系数
    c0, c1, c2, c3 = 0.0, 0.0, 0.0, 0.0
    for coeff, j_exp, pd_exp, aeao_exp, z_exp in At:
        term = coeff * (pd**pd_exp) * (AeAo**aeao_exp) * (z**z_exp)
        if j_exp == 0:
            c0 += term
        elif j_exp == 1:
            c1 += term
        elif j_exp == 2:
            c2 += term
        elif j_exp == 3:
            c3 += term

    # 构造并求解三次方程
    denominator = D_sw * V_a**2 * D_p**2
    ratio = T / denominator
    
    def equation(j): 
        return c3*j**3 + (c2 - ratio)*j**2 + c1*j + c0

    # 求解三次方程, 求出所有根, 然后筛选出0-1.5之间的根
    # 构建三次方程系数
    coeffs = [c3, (c2 - ratio), c1, c0]
    roots = np.roots(coeffs) 

    valid_roots = []
    for root in roots:
        if np.isreal(root): 
            real_root = root.real 
            if 0 <= real_root <= 1.5: 
                valid_roots.append(real_root) 
    
    if not valid_roots:
        raise ValueError("无有效进速系数解，请检查输入参数")

    # print(f'{valid_roots=}')
    jcoef = max(valid_roots)  # 选择最大实根

    # 计算螺旋桨转速 
    N_ps = V_a / (jcoef * D_p)  # 转/秒 
    N_p = 60 * N_ps             # 转/分钟 

    # 错误信号处理
    if N_p < 140:
        Esignal1 = -1
    elif N_p > 260:
        Esignal1 = 1

    # 定义Aq系数矩阵 (用于计算k_q)
    Aq = [
        [0.00379368, 0, 0, 0, 0],
        [0.00886523, 2, 0, 0, 0],
        [-0.032241, 1, 1, 0, 0],
        [0.00344778, 0, 2, 0, 0],
        [-0.0408811, 0, 1, 1, 0],
        [-0.108009, 1, 1, 1, 0],
        [-0.0885381, 2, 1, 1, 0],
        [0.188561, 0, 2, 1, 0],
        [-0.00370871, 1, 0, 0, 1],
        [0.00513696, 0, 1, 0, 1],
        [0.0209449, 1, 1, 0, 1],
        [0.00474319, 2, 1, 0, 1],
        [-0.00723408, 2, 0, 1, 1],
        [0.00438388, 1, 1, 1, 1],
        [-0.0269403, 0, 2, 1, 1],
        [0.0558082, 3, 0, 1, 0],
        [0.0161886, 0, 3, 1, 0],
        [0.00318086, 1, 3, 1, 0],
        [0.015896, 0, 0, 2, 0],
        [0.0471729, 1, 0, 2, 0],
        [0.0196283, 3, 0, 2, 0],
        [-0.0502782, 0, 1, 2, 0],
        [-0.030055, 3, 1, 2, 0],
        [0.0417122, 2, 2, 2, 0],
        [-0.0397722, 0, 3, 2, 0],
        [-0.00350024, 0, 6, 2, 0],
        [-0.0106854, 3, 0, 0, 1],
        [0.00110903, 3, 3, 0, 1],
        [-0.000313912, 0, 6, 0, 1],
        [0.0035985, 3, 0, 1, 1],
        [-0.00142121, 0, 6, 1, 1],
        [-0.00383637, 1, 0, 2, 1],
        [0.0126803, 0, 2, 2, 1],
        [-0.00318278, 2, 3, 2, 1],
        [0.00334268, 0, 6, 2, 1],
        [-0.00183491, 1, 1, 0, 2],
        [0.000112451, 3, 2, 0, 2],
        [-0.0000297228, 3, 6, 0, 2],
        [0.000269551, 1, 0, 1, 2],
        [0.00083265, 2, 0, 1, 2],
        [0.00155334, 0, 2, 1, 2],
        [0.000302683, 0, 6, 1, 2],
        [-0.0001843, 0, 0, 2, 2],
        [-0.000425399, 0, 3, 2, 2],
        [0.0000869243, 3, 3, 2, 2],
        [-0.0004659, 0, 6, 2, 2],
        [0.0000554194, 1, 6, 2, 2]
    ]

    # 计算k_q系数
    k_q = 0.0
    for coeff, j_exp, pd_exp, aeao_exp, z_exp in Aq:
        term = coeff * (jcoef**j_exp) * (pd**pd_exp) * (AeAo**aeao_exp) * (z**z_exp)
        k_q += term

    # 计算螺旋桨转矩
    Q_p = (k_q * 1.025) * D_sw * (N_ps**2) * (D_p**5)

    return N_p, Q_p, Esignal1