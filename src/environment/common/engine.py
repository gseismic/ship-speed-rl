import numpy as np
from scipy.interpolate import interp1d


def Engine_v1(N: float) -> tuple[float, float]: 
    """ 
    计算气体发动机在不同转速下的扭矩范围 
    
    通过预设的转速-扭矩特性曲线，使用线性插值计算指定转速下的最小和最大扭矩值。

    Parameters 
    ---------- 
    N : float 
        发动机转速，单位：转/分钟 (rpm) 

    Returns 
    ------- 
    tuple[float, float] 
        (Q_emin, Q_emax) 
        Q_emin : 最小可用扭矩，单位：牛·米 (N·m) 
        Q_emax : 最大可用扭矩，单位：牛·米 (N·m) 

    Notes
    -----
    1. 使用线性插值和外推法处理超出预设范围的转速 
    2. 最小扭矩曲线数据点：9个 
    3. 最大扭矩曲线数据点：26个 
    4. 当输入转速超出预设范围时自动进行外推 
    """
    # 最小扭矩特性数据
    min_curve = (
        np.array([700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]),
        np.array([620, 630, 650, 650, 650, 700, 700, 700, 700])
    )

    # 最大扭矩特性数据 
    max_curve = (
        # np.array([700, 742.24, 779.21, 803.91, 836.57, 885.02, 933.46, 985.41,
        #           1016.16, 1059.35, 1100.78, 1143.01, 1169.46, 1195.91, 1217.90,
        #           1229.37, 1250.41, 1263.63, 1274.31, 1302.52, 1332.31, 1357.01,
        #           1378.21, 1403.70, 1438.12, 1471.59, 1500]),
        np.array([700,742.23704,779.20655,803.906,836.57302,885.01583,
               933.45863,985.40716,1016.16197,1059.34617,1100.77752,
               1143.00562,1169.45794,1195.91026,1217.90074,1229.37404,
               1250.40841,1263.63457,1274.31111,1302.51629,1332.31499,
               1357.01445,1378.20817,1403.70438,1438.12427,1471.58805,1500]),

        # np.array([1159, 1273, 1379, 1518.63, 1518.63, 1515.49, 1512.87, 1503.96,
        #           1507.10, 1539.07, 1567.90, 1674.84, 1698, 1720, 1730.19,
        #           1733.83, 1745.78, 1762.19, 1811.07, 1918.51, 1999.21, 2065.77,
        #           2120.80, 2196.27, 2207.80, 2225.09, 2245.53])
        np.array([1159,1273,1379,1518.63348,1518.63348,1515.489,
               1512.8686,1503.95924,1507.10372,1539.07259,
               1567.89698,1674.83747,1698,1720,1730.19161,
               1733.83472,1745.77813,1762.18611,1811.07002,
               1918.50638,1999.21467,2065.77281,2120.80119,
               2196.26869,2207.79844,2225.09308,2245.53219])
    )

    # 创建插值器（包含外推功能）
    interp_min = interp1d(*min_curve, kind='linear', fill_value='extrapolate')
    interp_max = interp1d(*max_curve, kind='linear', fill_value='extrapolate')

    return float(interp_min(N)), float(interp_max(N)) 


import numpy as np
from scipy.interpolate import interp1d

def Engine(N):
    # 气体机特性数据
    N_emin_data = [700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]
    Q_emin_data = [620, 630, 650, 650, 650, 700, 700, 700, 700]
    
    N_emax_data = [700, 742.23704, 779.20655, 803.906, 836.57302, 885.01583,
                   933.45863, 985.40716, 1016.16197, 1059.34617, 1100.77752,
                   1143.00562, 1169.45794, 1195.91026, 1217.90074, 1229.37404,
                   1250.40841, 1263.63457, 1274.31111, 1302.51629, 1332.31499,
                   1357.01445, 1378.20817, 1403.70438, 1438.12427, 1471.58805, 1500]
    Q_emax_data = [1159, 1273, 1379, 1518.63348, 1518.63348, 1515.489,
                   1512.8686, 1503.95924, 1507.10372, 1539.07259,
                   1567.89698, 1674.83747, 1698, 1720, 1730.19161,
                   1733.83472, 1745.77813, 1762.18611, 1811.07002,
                   1918.50638, 1999.21467, 2065.77281, 2120.80119,
                   2196.26869, 2207.79844, 2225.09308, 2245.53219]
    
    # 创建插值函数，设置超出范围返回NaN 
    # f_emin = interp1d(N_emin_data, Q_emin_data, kind='linear', bounds_error=False, fill_value=np.nan) 
    f_emin = interp1d(N_emin_data, Q_emin_data, kind='linear', bounds_error=False, fill_value=(Q_emin_data[0], Q_emin_data[-1]))
    f_emax = interp1d(N_emax_data, Q_emax_data, kind='linear', bounds_error=False, fill_value=(Q_emax_data[0], Q_emax_data[-1]))
    
    # print(f'{N=}, {N_emin_data[0]=}, {N_emin_data[-1]=}') 
    # print(f'{N=}, {N_emax_data[0]=}, {N_emax_data[-1]=}') 
    # 计算插值结果
    Q_emin = f_emin(N) 
    Q_emax = f_emax(N) 
    
    return Q_emin, Q_emax