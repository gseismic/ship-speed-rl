import numpy as np

def Emission(N_e: float, Q_e: float) -> float:
    """
    计算气体发动机的氮氧化物和二氧化碳排放率
    
    该函数根据发动机转速和转矩，通过多组插值条件确定最终的排放率值。

    Parameters
    ----------
    N_e : float
        发动机转速，单位：转/分钟 (rpm)
    Q_e : float
        发动机转矩，单位：牛·米 (N·m)

    Returns
    -------
    float
        氮氧化物和二氧化碳的综合排放率，单位：千克/小时 (kg/h)

    Notes
    -----
    1. 当转速和转矩均为零时，排放率直接返回0
    2. 使用6组插值条件矩阵确定最终采用的排放系数
    3. 插值条件判断顺序影响最终结果，按条件1~6的优先级顺序匹配
    """
    # 提前返回零值情况
    if N_e == 0 and Q_e == 0:
        return 0.0

    # 条件矩阵集合
    cons = [
        np.array([[0.63319, 0.77399], [-0.038721, -0.99925], [-0.96384, -0.2665],
                  [-0.83662, 0.54778], [1, 0]]),
        np.array([[-0.63319, -0.77399], [-0.99597, -0.089684], [1, 0], [0, 1]]),
        np.array([[0.038721, 0.99925], [-0.5547, 0.83205], [1, 0], [-1, 0], [0, -1]]),
        np.array([[0.96384, 0.2665], [0.5547, -0.83205], [-0.68853, 0.72521],
                  [0.39095, 0.92041], [-1, 0]]),
        np.array([[0.68853, -0.72521], [0.998, -0.063171], [-1, 0], [0, 1]]),
        np.array([[0.83662, -0.54778], [0.99597, 0.089684], [-0.39095, -0.92041],
                  [-0.998, 0.063171], [0, 1]])
    ]

    # 常数项集合
    coms = [
        np.array([1741.2728, -611.19781, -1345.7247, -467.01343, 1500]),
        np.array([-1741.2728, -1422.1127, 1500, 2000]),
        np.array([611.19781, -219.10658, 1500, -600, 0]),
        np.array([1345.7247, 219.10658, 3.7844125, 1276.8233, -600]),
        np.array([-3.7844125, 943.04437, -600, 2000]),
        np.array([467.01343, 1422.1127, -1276.8233, -943.04437, 2000])
    ]

    # 插值系数矩阵
    Coe = np.array([
        [-0.0001121, 0.0007264],
        [0.00008791, 0.0012],
        [0.000075726, 0.00067465],
        [0.0011, 0.00099454],
        [-0.00044031, 0.0020],
        [-0.0020, 0.0012]
    ])
    Coe_C = np.array([0.2241, -0.6078, -0.0606, -1.0150, -0.5022, 2.1077])

    # 输入向量化
    input_vec = np.array([N_e, Q_e])
    
    # 计算所有条件结果
    condition_results = [con @ input_vec for con in cons]
    
    # 计算所有可能排放值
    emission_values = Coe @ input_vec + Coe_C

    # 顺序匹配条件
    for i in range(6):
        if np.all(condition_results[i] <= coms[i]):
            return emission_values[i]

    return 0.0  # 默认返回0