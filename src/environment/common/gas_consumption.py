import numpy as np

def Gas_consumption(N_e: float, Q_e: float) -> float:
    """
    计算气体发动机的燃料消耗率
    
    根据发动机转速和转矩，通过多组插值条件确定气耗率值。

    Parameters
    ----------
    N_e : float
        发动机转速，单位：转/分钟 (rpm)
    Q_e : float
        发动机转矩，单位：牛·米 (N·m)

    Returns 
    ------- 
    float 
        燃料消耗率，单位：克/千瓦时 (g/kW·h)

    Notes
    -----
    1. 当转速和转矩均为零时直接返回0
    2. 使用8组插值条件矩阵确定最终结果
    3. 插值条件判断按1~8的优先级顺序执行
    4. 包含外推保护机制确保返回值合理性
    """
    # 提前处理零值情况
    if N_e == 0 and Q_e == 0:
        return 0.0

    # 条件矩阵集合
    cons = [
        np.array([[0.65649, 0.75434], [0.9884, -0.15187], [-1, 0], [0, -1]]),
        np.array([[-0.9884, 0.15187], [0.62107, -0.78376], [-0.22464, 0.97444], [0, -1]]),
        np.array([[-0.46772, 0.88388], [-0.62107, 0.78376], [1, 0], [0, -1]]),
        np.array([[-0.11937, 0.99285], [-0.65649, -0.75434], [0.46772, -0.88388],
                  [-0.42678, 0.90435], [0.22464, -0.97444], [0.26219, 0.96502], [1, 0], [-1, 0]]),
        np.array([[0.88377, -0.46792], [0.98102, -0.19388], [0.42678, -0.90435], [-1, 0], [0, 1]]),
        np.array([[-0.88377, 0.46792], [-0.22744, 0.97379], [0.11937, -0.99285], [0.99382, -0.11103]]),
        np.array([[0.22744, -0.97379], [-0.98102, 0.19388], [0.11937, -0.99285], [0.89753, -0.44096], [0, 1]]),
        np.array([[-0.99382, 0.11103], [-0.89753, 0.44096], [-0.26219, -0.96502], [1, 0], [0, 1]])
    ]

    # 常数项集合
    coms = [
        np.array([945.81167, 876.7296, -600, 0]),
        np.array([-876.7296, 606.0584, 200.24515, 0]),
        np.array([-278.16582, -606.0584, 1800, 0]),
        np.array([788.58652, -945.81167, 278.16582, 508.94368, -200.24515, 1299.9232, 1800, -600]),
        np.array([173.04615, 634.87389, -508.94368, 600, 2000]),
        np.array([-173.04615, 1116.209, -788.58652, 1294.6863]),
        np.array([-1116.209, -634.87389, -788.58652, 661.83958, 2000]),
        np.array([-1294.6863, -661.83958, -1299.9232, 1800, 2000])
    ]

    # 插值系数矩阵
    Coe = np.array([
        [-0.0253, -0.2176],
        [0.0347, -0.2244],
        [0.1796, -0.4803],
        [0.0282, -0.1637],
        [-0.0456, -0.0171],
        [0.0072, -0.0490],
        [0.0310, -0.0305],
        [0.0515, -0.0465]
    ])
    Coe_C = np.array([408.5841, 355.2673, 229.4236, 334.8767, 263.6802, 263.9028, 212.7419, 195.8660])

    # 输入向量化
    input_vec = np.array([N_e, Q_e])
    
    # 批量计算条件结果
    condition_results = [con @ input_vec for con in cons]
    
    # 计算所有可能值
    fuel_rates = Coe @ input_vec + Coe_C

    # 顺序条件匹配 
    for i in range(8):
        if np.all(condition_results[i] <= coms[i]):
            return float(fuel_rates[i])

    return 0.0  # 默认保护返回